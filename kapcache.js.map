{
  "version": 3,
  "sources": ["src/kapcache.ts"],
  "sourcesContent": ["// (c) SpcFORK - Kaboom Cache System\n// 2024-05-29 - 1:00 AM\n\nimport * as kbg from \"kaplay\";\n\nexport const HEADER = {\n  name: 'Cacher',\n  version: '0.0.4'\n}\n\nconst wait = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\nexport class Cacher {\n  private cacheName: string;\n\n  private _cache: Cache;\n  set cache(v: Cache) {\n    this._cache = v;\n    localStorage.setItem(this.cacheName, JSON.stringify(v));\n    this.initialized = true;\n  }\n\n  get cache() {\n    return this._cache;\n  }\n\n  private initialized = false;\n\n  static nsBuilder(ns: string, text: string) {\n    return `${ns}~${text}`;\n  }\n\n  constructor(cacheName: string) {\n    this.cacheName = cacheName;\n  }\n\n  ensureIsInit() {\n    if (!this.initialized)\n      throw new Error(\"Cache not initialized, will not function without cache\");\n  }\n\n  async init() {\n    this.cache = await caches.open(this.cacheName);\n    this.initialized = true;\n  }\n\n  createNamespace(namespace: string): CacherNamespace {\n    this.ensureIsInit();\n    return new CacherNamespace(this, namespace);\n  }\n\n  createSpriteCacher() {\n    this.ensureIsInit();\n    return new window.SpriteCacher(this);\n  }\n}\n\nexport class CacherNamespace {\n  namespace: string;\n  parent: Cacher;\n  cache: () => Cache;\n\n  constructor(parent: Cacher, namespace: string) {\n    parent.ensureIsInit();\n    this.namespace = namespace;\n    this.parent = parent;\n    this.cache = () => this.parent.cache;\n  }\n\n  nsBuilder = (name: string) => Cacher.nsBuilder(this.namespace, name);\n\n  async get(name: string): Promise<Response | undefined> {\n    return await this.cache().match(this.nsBuilder(name));\n  }\n\n  async put(name: string, response: Response) {\n    await this.cache().put(this.nsBuilder(name), response);\n  }\n\n  makeRollout(rolloutList: string[], rolloutInterval = 0) {\n    return new CacheRollout(this, rolloutList, rolloutInterval);\n  }\n}\n\nexport class CacheRollout {\n  rolloutList: string[];\n  rolloutInterval: number;\n  parent: CacherNamespace;\n  cache: () => Cache;\n\n  constructor(parent: CacherNamespace, rolloutList: string[], rolloutInterval = 0) {\n    this.rolloutList = rolloutList;\n    this.rolloutInterval = rolloutInterval;\n    this.parent = parent;\n    this.cache = () => parent.cache();\n  }\n\n  async rollout(cb: (name: string, nsName: string, response: Response | undefined, t: InstanceType<typeof CacheRollout>) => any): Promise<any[]> {\n    const results = await Promise.all(this.rolloutList.map(async (name) => {\n      const nsName = this.parent.nsBuilder(name);\n      const response = await this.cache().match(nsName);\n      const result = await cb(name, nsName, response, this);\n      if (this.rolloutInterval > 0) await wait(this.rolloutInterval);\n      return result;\n    }));\n    return results;\n  }\n\n  // @ Throw out broken Caches\n  async tossBrokenCaches(rolloutList: string[]) {\n    let ck = await this.cache().keys();\n    let arrNotInRLL: string[] = [];\n    for (let req of ck) {\n      let name = req.url.split('/').pop()?.split('~')[1] as string;\n      if (!rolloutList.includes(name)) arrNotInRLL.push(name);\n    }\n    for (let b of arrNotInRLL) await this.cache().delete(b);\n  }\n}\n\nexport function CacherPlugin(kbg: kbg.KaboomCtx) {\n\n  class SpriteCacher {\n    namespace: string;\n    parent: Cacher;\n    CNS: CacherNamespace;\n    cache: () => Cache;\n\n    nsBuilder = (name: string) => Cacher.nsBuilder(this.namespace, name);\n\n    constructor(parent: Cacher) {\n      this.namespace = 'sprite';\n      this.parent = parent;\n      this.CNS = new CacherNamespace(parent, this.namespace);\n      this.cache = () => this.CNS.cache();\n    }\n\n    async fetchAndCacheSprite(name: string): Promise<Response> {\n      const response = await fetch(`./sprites/${name}.png`);\n      const imageBlob = await response.blob();\n      const imageUrl = URL.createObjectURL(imageBlob);\n\n      let res = new Response(imageBlob);\n\n      await this.CNS.put(name, res);\n      await kbg.loadSprite(name, imageUrl);\n\n      return res;\n    }\n\n    async loadCachedSprite(name: string, cachedResponse: Response): Promise<Response> {\n      const reader = new FileReader();\n      reader.onload = async () => await kbg.loadSprite(name, reader.result as string)\n        .catch(async (e) => {\n          console.error(`Failed to load cached sprite for ${name}:`, e);\n          cachedResponse = await this.fetchAndCacheSprite(name);\n        });\n\n      reader.readAsDataURL(await cachedResponse.blob());\n      return cachedResponse;\n    }\n\n    async rollout(rolloutList: string[], rolloutInterval = 0) {\n      let rl = this.CNS.makeRollout(rolloutList, rolloutInterval);\n      let res = await rl.rollout(async (name, nsName, response, t) => {\n        if (response) await this.loadCachedSprite(name, response);\n        else await this.fetchAndCacheSprite(name);\n      })\n      await rl.tossBrokenCaches(rolloutList);\n      return res;\n    }\n  }\n\n  return {\n    ...HEADER,\n    Cacher,\n    CacherNamespace,\n    CacheRollout,\n    SpriteCacher,\n  };\n}"],
  "mappings": "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",
  "names": ["wait", "ms", "resolve", "v", "ns", "text", "cacheName", "namespace", "parent", "name", "response", "rolloutList", "rolloutInterval", "cb", "nsName", "result", "ck", "arrNotInRLL", "req", "b", "kbg", "SpriteCacher", "imageBlob", "imageUrl", "res", "cachedResponse", "reader", "e", "rl", "t"]
}
